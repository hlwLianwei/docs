<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/layout_test"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:background="#FF000000">

</LinearLayout>
LinearLayout,RelativeLayout,FrameLayout,AbsoluteLayout,TableLayout

android:orientation="vertical"
android:orientation="horizontal"

android:visibility="gone"
android:visibility="visible"
android:visibility="invisible"

android:clickable="true"
android:layout_margin="4dp"
android:padding="4dp"
android:layout_marginRight="4dp"
android:paddingBottom="4dp"

match_parent,fill_parent

<!-- 包含布局 -->
<include layout="@+layout/split_maintools"/>

<Button
    android:layout_height="wrap_content"
    android:layout_width="0dp"
    android:layout_weight="1"
    android:textSize="@+dimen/layout_tools_main_font"
    android:text="关闭"
    android:layout_gravity="center"
    android:gravity="center"
    android:layout_marginRight="4dp"
    android:paddingBottom="4dp"/>

<TextView
    android:layout_height="wrap_content"
    android:layout_width="wrap_content"
    android:textSize="@+dimen/layout_tools_main_font"
    android:text="@+string/surface_tools_design_auto"
    android:drawableLeft="@+drawable/ic_launcher"
    android:layout_gravity="center"
    android:gravity="center"/>

<EditText
    android:id="@+id/edit_name"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:singleLine="true"
    android:minEms="8"
    android:maxEms="8"/>

<ImageView
    android:src="@+drawable/b"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:clickable="true"
    android:src="@+drawable/ic_launcher"/>

<RadioButton
    android:id="@+id/rdb_browse_design"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@+string/surface_tools_browser_design"
    android:textColor="#FF000000"
    android:textSize="@+dimen/layout_tools_main_font"
    android:minEms="4"
    android:layout_gravity="center"
    android:gravity="center"/>


<Spinner
    android:id="@+id/sp_status"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:minEms="8"/>

<CheckBox
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:button="@null"
    android:background="@+drawable/tools_seminar_types_background_selector"/>

<RadioGroup
    android:id="@+id/rg_browse"
    android:orientation="horizontal" 
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_gravity="center"
    android:gravity="center">
</RadioGroup>

<GridView
    android:id="@+id/gv_pipes"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:numColumns="1"
    android:verticalSpacing="1dp"
    android:horizontalSpacing="1dp"
    android:stretchMode="columnWidth"
    android:gravity="center"/>

<ListView android:id="@+id/lv_pipes"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"       
    android:visibility="gone"/>

<!-- 水平滚动条, 水平在LinearLayout中不能加android:layout_gravity否则显示不全 -->        
<HorizontalScrollView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:scrollbars="none"
    android:fillViewport="true">
    
    <LinearLayout
        android:orientation="horizontal"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:gravity="center">
    </LinearLayout>
</HorizontalScrollView>

// 文字不同状态不同颜色
<TextView
    android:layout_height="wrap_content"
    android:layout_width="wrap_content"
    android:textColor="@drawable/ic_colls_search_btn_font_selector"/>
// 在 selector 里定义文字状态的颜色
<selector xmlns:android="http://schemas.android.com/apk/res/android"> 
    <item android:state_enabled="true"  android:state_pressed="true" android:color="@color/white" />
    <item android:state_enabled="false" android:color="@color/colls_load_more" />
    <item android:color="@color/colls_load_more" /> 
</selector>
// 在 res/values/color.xml里定义颜色
<resources>
    <color name="white">#ffffff</color>
    <color name="colls_load_more">#ffff00</color>
</resources>


// map 遍历
java.util.Map<String, Object> attributes = null;
java.util.Set<String> key = attributes.keySet();
for (java.util.Iterator<String> it = key.iterator(); it.hasNext();) {
  String strKey = (String)it.next();
  Object obj = attributes.get(strKey);
}

// 格式化数字
double dy = 34243.9824343;
java.text.DecimalFormat df = new java.text.DecimalFormat("0.00");
String strDy = df.format(dy)

// 格式化字符串警告解决
String.format(java.util.Locale.getDefault(), "POINT(%f %f)", 5.6, 12.9);

// 日期时间格式化警告解决(fff为毫秒, 2016-12-31 21:56:59.865)
java.text.SimpleDateFormat fmt = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.fff", java.util.Locale.getDefault());
String strTime = fmt.format(new java.util.Date());

// Handler处理消息警告解决
private Handler mHandler = new Handler(new Handler.Callback() {
  @Override
  public boolean handleMessage(Message msg) {
    return false;
  }
});

m_handler.post(new Runnable() {
  public void run() {
    // 处理数据
  }
});

// 线程
Thread thread=new Thread(new Runnable(){  
  @Override  
  public void run() {  
  }  
});  
thread.start();  

// 打开新activity
Intent intent = new Intent(LoginActivity.this, MainActivity.class);
startActivity(intent);
finish();

LayoutInflater加载布局
// getSystemService
LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
// static LayoutInflater from(Context context)
LayoutInflater inflater = LayoutInflater.from(context); 
// 在 Activity 内部调用 getLayoutInflater()
LayoutInflater inflater = getLayoutInflater()；
inflate(int resource, ViewGroup root);

inflate(XmlPullParser parser, ViewGroup root); // 动态加载外部布局xml文件
inflate(int resource , ViewGroup root, boolean attachToRoot);

inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot); // 动态加载外部布局xml文件
root != null & attachToRoot == true 
  // 把 resource 关联的布局加载为一个 View 作为 root 的子 View，然后返回 root。
  // 并且resource 关联的布局 android:layout_xxx 布局参数有效。
root != null & attachToRoot == false
  // 把 resource 关联的布局加载为一个 View 直接返回。
  // 并把 resource 关联的布局的 android:layout_xxx 布局参数作为 LayoutParams 保留。
root == null
  // 把 resource 关联的布局加载为一个 View 直接返回。
  // resource 关联的布局 android:layout_xxx 布局参数无效。