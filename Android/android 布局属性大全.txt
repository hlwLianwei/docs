// 获取屏幕物理尺寸 API_13以上才可以调用
private double getScreenSizeOfDevice2() {
    android.graphics.Rect rect = new android.graphics.Rect();
    getWindowManager().getDefaultDisplay().getRectSize(rect);
    android.util.DisplayMetrics dm = getResources().getDisplayMetrics();
    double x = Math.pow(rect.width()/ dm.xdpi, 2);
    double y = Math.pow(rect.height() / dm.ydpi, 2);
    double screenInches = Math.sqrt(x + y);

    // 1英寸(in)=2.54厘米(cm)
    android.util.Log.e("screen", "Screen inches : " + screenInches);

    return screenInches;
}

FrameLayout ―― 里面只可以有一个控件，并且不能设计这个控件的位置，控件会放到左上角


LinearLayout ―― 里面可以放多个控件，但是一行只能放一个控件
TableLayout ―― 这个要和TableRow配合使用，很像html里面的table


AbsoluteLayout ―― 里面可以放多个控件，并且可以自己定义控件的x,y的位置


RelativeLayout ―― 里面可以放多个控件，不过控件的位置都是相对位置
(界面的布局好像还可以直接引用一些view，如ScrollView等)


android:orientation ―― 它确定了LinearLayout的方向，其值可以为*vertical， 表示垂直布局   *horizontal， 表示水平布局

	
android:layout_width ―― 指在父控件中当前控件的宽，可以设定其确定的值，但一般使用下面两个值*fill_parent，填满父控件的空白*wrap_content，表示大小刚好足够显示当前控件里的内容 

android:layout_height ―― 指明了在父控件中当前控件的高，可以设定其确定的值，但一般使用下面两个值*fill_parent，填满父控件的空白*wrap_content，表示大小刚好足够显示当前控件里的内容  

android:id  ―― 为控件指定相应的ID  

android:grivity ―― 指定控件的基本位置，比如说居中，居右等位置。如果是没有子控件的view设置此属性，表示内容的对齐方式；如果是有子控件的view设置此属性，则表示子控件的对齐方式（重力倾向），其值需要多个时，用“|”分开）

android:layout_gravity属性设置该控件位于父控件的位置。例如:android:layout_gravity="center_vertical"

android:textSize ―― 指定控件当中字体的大小

android:background ―― 指定该控件所使用的背景色,RGB命名法 。如果设置一个透明的背景图片按钮android:background="@android:color/transparent"  

android:width 及 android:height ―― 指定控件的宽度和高度

android:padding* ―― (paddingLeft,paddingRight,paddingTop,paddingBottom)指定控件的内边距，也就是说控件当中的内容  
android:layout_margin* ―― 属性设置边缘空白，有上下左右之分。例如:android:layout_marginRight="3dip" 

android:singleLine ―― 如果设置为真的话，则将控件的内容在同一行当中进行显示 

android:src ―― 引用资源，例如：应用另一个XML，android:src="@drawable/imageselector"  

android:layout_alignBottom ―― 属性是用来与某控件的底部对齐。例如:android:layout_alignBottom="@id/TVfilepath"

第一类:属性值为true或false  -----注意这里只跟RelativeLayout相关才起作用------
android:layout_centerHorizontal ―― 如果值为真，该控件将被至于水平方向的中央(水平居中)  
android:layout_centerVertical ―― 如果值为真，该控件将被至于垂直方向的中央(垂直居中)  
android:layout_centerInParent ―― 如果值为真，该控件将被至于父控件水平方向和垂直方向的中央(相对于父元素完全居中 )  
  
android:layout_alignParentBottom ―― 如果该值为true，则将该控件的底部和父控件的底部对齐(贴紧父元素的下边缘)  
android:layout_alignParentLeft ―― 如果该值为true，则将该控件的左边与父控件的左边对齐(贴紧父元素的左边缘)  
android:layout_alignParentRight ―― 如果该值为true，则将该控件的右边与父控件的右边对齐(贴紧父元素的右边缘)  
android:layout_alignParentTop ―― 如果该值为true，则将空间的顶部与父控件的顶部对齐(贴紧父元素的上边缘)  
android:layout_alignWithParentIfMissing  ―― 如果对应的兄弟元素找不到的话就以父元素做参照物  

第二类：属性值必须为id的引用名“@id/id-name”    -----注意这里只跟RelativeLayout相关才起作用------  
android:layout_above ―― 将该控件的底部至于给定ID的控件之上(在某元素的的上方)  
android:layout_below ―― 将该控件的顶部至于给定ID的控件之下(在某元素的下方 )  
android:layout_toLeftOf ―― 将该控件的右边缘和给定ID的控件的左边缘对齐(在某元素的左边 )  
android:layout_toRightOf ―― 将该控件的左边缘和给定ID的控件的右边缘对齐(在某元素的右边 )  
  
android:layout_alignTop ―― 将给定控件的顶部边缘与给定ID控件的顶部对齐(本元素的上边缘和某元素的的上边缘对齐)  
android:layout_alignBottom ―― 将该控件的底部边缘与给定ID控件的底部边缘(本元素的下边缘和某元素的的下边缘对齐 )  
android:layout_alignLeft ―― 将该控件的左边缘与给定ID控件的左边缘对齐(本元素的左边缘和某元素的的左边缘对齐)  
android:layout_alignRight ―― 将该控件的右边缘与给定ID控件的右边缘对齐(本元素的右边缘和某元素的的右边缘对齐)  
android:layout_alignBaseline ―― 该控件的baseline和给定ID的控件的baseline对齐  

EditText的android:hint    
  
设置EditText为空时输入框内的提示信息。   
  
android:gravity 　   
android:gravity属性是对该view 内容的限定．比如一个button 上面的text.  你可以设置该text 在view的靠左，靠右等位置．以button为例，android:gravity="right"则button上面的文字靠右   
  
-----注意这里只跟Linearlayout相关才起作用------
android:layout_gravity    ---top、bottom、left、right、center_vertical、fill_vertical、center_horizontal、fill_horizontal、center、fill、clip_vertical。
android:layout_gravity是用来 设置该view相对与起父view 的位置．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为 例，android:layout_gravity="right"则button靠右   
  
android:layout_alignParentRight    
使 当前控件的右端和父控件的右端对齐。这里属性值只能为true或false，默认false。   
  
android:scaleType：    
android:scaleType是控制图片如何 resized/moved来匹对ImageView的size。ImageView.ScaleType / android:scaleType值的意义区别：   
  
CENTER /center  按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示   
  
CENTER_CROP / centerCrop  按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽)   
  
CENTER_INSIDE / centerInside  将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽   
  
FIT_CENTER / fitCenter  把图片按比例扩大/缩小到View的宽度，居中显示   
  
FIT_END / fitEnd   把图片按比例扩大/缩小到View的宽度，显示在View的下部分位置   
  
FIT_START / fitStart  把图片按比例扩大/缩小到View的宽度，显示在View的上部分位置   
  
FIT_XY / fitXY  把图片不按比例扩大/缩小到View的大小显示   
  
MATRIX / matrix 用矩阵来绘制，动态缩小放大图片来显示。   