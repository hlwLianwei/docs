01:安装MongoDB数据库,要大于v3.4及以上版本的https://www.mongodb.com/download-center/community；
   安装目录D:\Program Files\MongoDB；
   安装MongoDB时，不要勾选mongodb compass项，否则安装过程会卡住；
   安装完成后创建数据存放文件夹D:\MongoDB\data\db，这个路径不能有空格(中文?)；
   命令行下cd到安装目录，运行：mongod --dbpath D:\MongoDB\data\db （路径根据个人安装情况而变，不能有空格或中文）
   在浏览器输入：http://localhost:27017/，你会看到：
   It looks like you are trying to acess MongoDB over HTTP on the native driver port.

02:安装redis数据库，要v4.0版本及以上的，windows版本不好找。
   使用附件下的redis-4.0.2.3.zip,绿色版本的，解压到D:\Program Files\redis-4.0.2.3；
   命令行下cd到安装目录，运行：redis-server.exe "D:\Program Files\redis-4.0.2.3\redis.windows.conf"，

03:安装nodejs，要v8.x版本的https://nodejs.org/en/blog/release/v8.9.0/
   安装目录D:\Program Files\nodejs；

04:下载Easy-Mock，https://github.com/easy-mock/easy-mock；
   解压到D:\WorkSpace\easy-mock-dev；
   命令行下cd到安装目录，安装依赖项：npm install；
   若出现if not defined npm_config_node_gyp等错误，则安装：npm install -g node-gyp；
   若出现fsevents错误，则在依赖项中删除fsevents依赖，这个在windows下不需要；
   npm install安装成功后，修改config下default.json文件将host改为localhost或者本地ip；
   运行：npm run dev 启动项目(先确保MongoDB和redis已经运行)；
   在浏览器输入http://localhost:7300/
   添加一个测试账号test:123456


//mockjs 文档的github地址: https://github.com/nuysoft/Mock/wiki
// Easy-Mock数据格式示例大全: https://www.cnblogs.com/coder-lzh/p/10795921.html

let Mock = require('mockjs');
let basicData = Mock.mock({
    'list|1-100': [{
        'id|+1': 1, // id是一个自增数, 起始值为1, 每次增1
        'string': '@string',//可以生成随机基本数据类型
        'point': '@integer',//可以生成随机基本数据类型
        'name': '@name', //英文名, '@cname'中文名,
        'title': '@title', //英文标题, '@ctitle'中文标题,
        'birthday': '@date',//可以生成随机基本数据类型
        'pic': '@image',//image 随机生成图片地址
        'title': '@title',//随机生成标题
        'content': '@cword(100)',//文本内容, 参数为字数
        'url': '@url',//可以生成url ip email等网络相关信息
        'ip': '@ip',//可以生成url ip email等网络相关信息
        'email': '@email',//可以生成url ip email等网络相关信息
        'area': '@region',//地区区域
        'province': '@province',//省份
        'city': '@city',//市
        'country': '@country',//县
        'area': '@region',//地区区域
        'address': '@country(true)',//地址
    }]
});

// console.log(basicData);

let basicData = Mock.mock({
    'list|1-100': [{
        'id|+1': 1,
        'isBoolean': '@boolean(10, 0, true)',//百分之百的true
        'naturalNumber': '@natural(1, 50)', //1~50的随机整数
        'integer': '@integer(0)', //随机整数
        'float': '@float(1, 100, 3, 6)', //随机浮点数, 
        'character': '@character("upper")', //一个随机字符
        'string': '@string("lower", 5, 20)', //一串随机字符串
        'range': '@range(1, 10, 2)', //一个整形数组，步长为2
    }]
});

// console.log(basicData);

let Date = Mock.mock({
    'dateList|10': [{
        'date': '@date',
        'date-yyyy-MM-dd': '@date(yyyy-MM-dd)',
        'date-yy-MM-dd': '@date(yy-MM-dd)',
        'date-y-MM-dd': '@date(y-MM-dd)',
        'date-y-M-d': '@date(y-M-d)',
        'line-through': '------------------------------------------------',
        'timessss': '@time', //随机的时间字符串,
        'time-format': '@time()', //指示生成的时间字符串的格式, default: 'HH: mm: ss',
        'time-format-1': '@time("A HH:mm:ss")',
        'time-format-2': '@time("a HH:mm:ss")',
        'time-format-3': '@time("HH:mm:ss")',
        'time-format-4': '@time("H:m:s")',
        'datetime': '@datetime("yyyy-MM-dd A HH:mm:ss")', //返回一个随机的日期和时间字符串
        'dateNow': '@now("second")', //获取当前完整时间
        'dateNow1': '@now("yyyy-MM-dd")' //获取当前日期2020-01-01
    }]
});
// console.log(Date);

let imageList = Mock.mock({
    'imageList|5': [{
        'id|+1': 1,
        'img': '@image',//生成一个随机的图片地址,
        'img-1': '@image("200x100", "#000", "#fff", "png", "Mock.js")', //生成一个200*100, 背景色#000，前景色#fff, 格式png, 文字mock.js的图片
    }]
})
// console.log(imageList);

let paragraph = Mock.mock({
    'paragraphList|5': [{
        'id|+1': 1,
        'paragraph1': '@cparagraph(2)', //生成一段2句话的中文文本,
        'paragraph2': '@paragraph(3)', //生成一个3句话的英文文本
        'title': '@title', //随机生成一个英文标题
        'ctitle': '@ctitle', //随机生成一个中文标题
    }]
})
// console.log(paragraph);

let name = Mock.mock({
    'nameList|5': [{
        'id|+1': 1,
        'name': '@name', //英文名,
        'cname': '@cname', //中文名
    }]
})
// console.log(name);

let webList = Mock.mock({
    'webList|5': [{
        'id|+1': 0,
        'url': '@url("http", "baidu.com")', //url: http://www.baidu.com
        'protocol': '@protocol', //随机生成一个url协议
        'domain': '@domain', //随机生成一个域名,
        'email': '@email', //随机生成一个邮箱地址,
        'ip': '@ip' //随机生成一个ip地址
    }]
})
// console.log(webList);

let address = Mock.mock({
    'addressList|5': [{
        'id|+1': 1,
        'region': '@region', //生成一个大区
        'province': '@province', //生成一个省份
        'city': '@city', //生成一个市
        'country': '@country', //一个县
        'zip': '@zip', //邮政编码
    }]
})
console.log(address)

自定义函数返回结果
{
  "Msg": "请求成功",
  "Ret": 0,
  "Data": {
  "nextDate": function({
        _req,
      }) {
        //时间格式化
        Date.prototype.format = function(f) {
          var y = this.getFullYear(),
            m = this.getMonth() + 1,
            d = this.getDate(),
            h = this.getHours(),
            t = this.getMinutes(),
            s = this.getSeconds();
          return f.replace(/yyyy/, y).replace(/MM/, m > 9 ? m : '0' + m).replace(/dd/, d > 9 ? d : '0' + d).replace(/hh/, h > 9 ? h : '0' + h).replace(/mm/, t > 9 ? t : '0' + t).replace(/ss/, s > 9 ? s : '0' + s);
        };
        var randomDay = Math.random() * 21 - 10; // -10~10的随机整数
        var dt = new Date(); // 当前时间, _req.body.type为post接口请求的body带的type参数, 若是get请求则为_req.query.type
        var nextDate = _req.body.type == "1" ? dt.setDate(dt.getDate() + 0) : (_req.body.type == "3" ? dt.setDate(dt.getDate() + 2) : (_req.body.type == "7" ? dt.setDate(dt.getDate() + 6) : dt.setDate(dt.getDate() + randomDay)));
        dt = new Date(nextDate)
        return dt.format('yyyy-MM-dd');
      },
      "tips": function() {
        var tips = '已延期';
        // 判断日期是否小于某个日期, nextDate为前面自定义的字段，this.xxx表示访问与它同级的属性；
        return this.nextDate < '2020-12-29' ? tips : '';
      }
  }
}
